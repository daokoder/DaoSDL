#{
  Copyright (C) 1997-2011 Sam Lantinga <slouken@libsdl.org>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely.
#}
# Ported to Dao by Limin Fu;
#
# Simple program:  draw as many random objects on the screen as possible 

load DaoSDL;
load DaoSDL_Test;

const NUM_OBJECTS = 100

global state :CommonState;
global num_objects = 0;
global cycle_color = 1;
global cycle_alpha = 1;
global cycle_direction = 1;
global current_alpha = 255;
global current_color = 255;
global blendMode = SDL_BLENDMODE_NONE;

routine DrawPoints( renderer :SDL_Renderer )
{
    viewport = SDL_Rect();

    # Query the sizes 
    SDL_RenderGetViewport(renderer, viewport);

    for (i = 0; i < num_objects * 4; ++i) {
        # Cycle the color and alpha, if desired 
        if (cycle_color) {
            current_color += cycle_direction;
            if (current_color < 0) {
                current_color = 0;
                cycle_direction = -cycle_direction;
            }
            if (current_color > 255) {
                current_color = 255;
                cycle_direction = -cycle_direction;
            }
        }
        if (cycle_alpha) {
            current_alpha += cycle_direction;
            if (current_alpha < 0) {
                current_alpha = 0;
                cycle_direction = -cycle_direction;
            }
            if (current_alpha > 255) {
                current_alpha = 255;
                cycle_direction = -cycle_direction;
            }
        }
        SDL_SetRenderDrawColor(renderer, 255, current_color, current_color, current_alpha);

        x = rand(100000) % viewport.w;
        y = rand(100000) % viewport.h;
        SDL_RenderDrawPoint(renderer, x, y);
    }
}

routine DrawLines( renderer :SDL_Renderer )
{
    viewport = SDL_Rect();

    # Query the sizes 
    SDL_RenderGetViewport(renderer, viewport);

    for (i = 0; i < num_objects; ++i) {
        # Cycle the color and alpha, if desired 
        if (cycle_color) {
            current_color += cycle_direction;
            if (current_color < 0) {
                current_color = 0;
                cycle_direction = -cycle_direction;
            }
            if (current_color > 255) {
                current_color = 255;
                cycle_direction = -cycle_direction;
            }
        }
        if (cycle_alpha) {
            current_alpha += cycle_direction;
            if (current_alpha < 0) {
                current_alpha = 0;
                cycle_direction = -cycle_direction;
            }
            if (current_alpha > 255) {
                current_alpha = 255;
                cycle_direction = -cycle_direction;
            }
        }
        SDL_SetRenderDrawColor(renderer, 255, current_color, current_color, current_alpha);

        if (i == 0) {
            SDL_RenderDrawLine(renderer, 0, 0, viewport.w - 1, viewport.h - 1);
            SDL_RenderDrawLine(renderer, 0, viewport.h - 1, viewport.w - 1, 0);
            SDL_RenderDrawLine(renderer, 0, viewport.h / 2, viewport.w - 1, viewport.h / 2);
            SDL_RenderDrawLine(renderer, viewport.w / 2, 0, viewport.w / 2, viewport.h - 1);
        } else {
            x1 = (rand(100000) % (viewport.w*2)) - viewport.w;
            x2 = (rand(100000) % (viewport.w*2)) - viewport.w;
            y1 = (rand(100000) % (viewport.h*2)) - viewport.h;
            y2 = (rand(100000) % (viewport.h*2)) - viewport.h;
            SDL_RenderDrawLine(renderer, x1, y1, x2, y2);
        }
    }
}

routine DrawRects( renderer :SDL_Renderer )
{
    rect = SDL_Rect();
    viewport = SDL_Rect();

    # Query the sizes 
    SDL_RenderGetViewport(renderer, viewport);

    for (i = 0; i < num_objects / 4; ++i) {
        # Cycle the color and alpha, if desired 
        if (cycle_color) {
            current_color += cycle_direction;
            if (current_color < 0) {
                current_color = 0;
                cycle_direction = -cycle_direction;
            }
            if (current_color > 255) {
                current_color = 255;
                cycle_direction = -cycle_direction;
            }
        }
        if (cycle_alpha) {
            current_alpha += cycle_direction;
            if (current_alpha < 0) {
                current_alpha = 0;
                cycle_direction = -cycle_direction;
            }
            if (current_alpha > 255) {
                current_alpha = 255;
                cycle_direction = -cycle_direction;
            }
        }
        SDL_SetRenderDrawColor(renderer, 255, current_color, current_color, current_alpha);

        rect.w = rand(100000) % (viewport.h / 2);
        rect.h = rand(100000) % (viewport.h / 2);
        rect.x = (rand(100000) % (viewport.w*2) - viewport.w) - (rect.w / 2);
        rect.y = (rand(100000) % (viewport.h*2) - viewport.h) - (rect.h / 2);
        SDL_RenderFillRect(renderer, rect);
    }
}

routine main( ... )
{
    event = SDL_Event();

    # Initialize parameters 
    num_objects = NUM_OBJECTS;

    # Initialize test framework 
    state = CommonCreateState(ARGV, SDL_INIT_VIDEO);
    if (state == none) {
        io.writeln( "failed to create state" );
        return 1;
    }
	argc = ARGV.size();
    for (i = 1; i < argc;0) {
        consumed = CommonArg(state, i);
        if (consumed == 0) {
            consumed = -1;
            if (ARGV[i] == "--blend") {
                if (ARGV[i + 1]) {
                    if (ARGV[i + 1] == "none") {
                        blendMode = SDL_BLENDMODE_NONE;
                        consumed = 2;
                    } else if (ARGV[i + 1] == "blend") {
                        blendMode = SDL_BLENDMODE_BLEND;
                        consumed = 2;
                    } else if (ARGV[i + 1] == "add") {
                        blendMode = SDL_BLENDMODE_ADD;
                        consumed = 2;
                    } else if (ARGV[i + 1] == "mod") {
                        blendMode = SDL_BLENDMODE_MOD;
                        consumed = 2;
                    }
                }
            } else if (ARGV[i] == "--cyclecolor") {
                cycle_color = SDL_TRUE;
                consumed = 1;
            } else if (ARGV[i] == "--cyclealpha") {
                cycle_alpha = SDL_TRUE;
                consumed = 1;
            # } else if (SDL_isdigit(*ARGV[i])) {
			}else{
                try{ num_objects = (int)ARGV[i] }catch{}
                consumed = 1;
            }
        }
        if (consumed < 0) {
			io.writeln( "Usage: %s %s [--blend none|blend|add|mod] [--cyclecolor] [--cyclealpha]\n",
                    ARGV[0], CommonUsage(state));
            return 1;
        }
        i += consumed;
    }
    if (!CommonInit(state)) {
        io.writeln( "failed to init state" );
        return 2;
    }

    # Create the windows and initialize the renderers 
    for (i = 0; i < state.num_windows; ++i) {
        renderer = state.renderers[i];
        SDL_SetRenderDrawBlendMode(renderer, blendMode);
        SDL_SetRenderDrawColor(renderer, 0xA0, 0xA0, 0xA0, 0xFF);
        SDL_RenderClear(renderer);
    }
    io.writeln( state.renderers );

    #srand((unsigned int)time(NULL));

    # Main render loop 
    frames = 0;
    then = SDL_GetTicks();
    done = 0;
    while (!done) {
        # Check for events 
        ++frames;
        while (SDL_PollEvent(event)) {
            done = CommonEvent(state, event, done);
        }
        for (i = 0; i < state.num_windows; ++i) {
            renderer = state.renderers[i];
            SDL_SetRenderDrawColor(renderer, 0xA0, 0xA0, 0xA0, 0xFF);
            SDL_RenderClear(renderer);

            DrawRects(renderer);
            DrawLines(renderer);
            DrawPoints(renderer);

            SDL_RenderPresent(renderer);
        }
    }

    CommonQuit(state);

    # Print out some timing information 
    now = SDL_GetTicks();
    if (now > then) {
        fps = (frames * 1000D) / (now - then);
        io.writef("%2.2f frames per second\n", fps);
    }
    return 0;
}
