#{
  Copyright (C) 1997-2011 Sam Lantinga <slouken@libsdl.org>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely.
#}
# Ported to Dao by Limin Fu;
#
# Simple program:  Move N sprites around on the screen as fast as possible 

load sys;
load sdl;
load sdl_test;

const WINDOW_WIDTH  = 640
const WINDOW_HEIGHT = 480
const NUM_SPRITES = 100
const MAX_SPEED = 1

var sprite: SDL_Texture;
var positions = list<SDL_Rect>( NUM_SPRITES ){ SDL_Rect() }
var velocities = list<SDL_Rect>( NUM_SPRITES ){ SDL_Rect() }
var sprite_w = 0;
var sprite_h = 0;

# Call this instead of exit(), so we can clean up SDL: atexit() is evil. 
routine quit( rc: int )
{
    sys.exit(rc);
}

routine SDL_LoadBMP( file: string )
{
    return SDL_LoadBMP_RW(SDL_RWFromFile(file, "rb"), 1);
}

routine LoadSprite( file: string, renderer: SDL_Renderer )
{
	io.writeln( file )
    # Load the sprite image 
    temp = SDL_LoadBMP(file);
    if (temp == none) {
        io.writef( "Couldn't load %s: %s\n", file, SDL_GetError());
        return (-1);
    }
    sprite_w = temp.w;
    sprite_h = temp.h;

    # Set transparent pixel as the pixel at (0,0) 
    if (temp.format.palette != none) {
        SDL_SetColorKey(temp, SDL_TRUE, temp[0,0,$uint8]);
    } else {
        switch (temp.format.BitsPerPixel) {
        case 15: SDL_SetColorKey(temp, SDL_TRUE, temp[0,0,$uint8] & 0x00007FFF);
        case 16: SDL_SetColorKey(temp, SDL_TRUE, temp[0,0,$uint16]);
        case 24: SDL_SetColorKey(temp, SDL_TRUE, temp[0,0,$uint32] & 0x00FFFFFF);
        case 32: SDL_SetColorKey(temp, SDL_TRUE, temp[0,0,$uint32]);
        }
    }

    # Create textures from the image 
    sprite = SDL_CreateTextureFromSurface(renderer, temp);
	io.writeln( std.about(sprite) )
    if (sprite == none) {
        io.writef( "Couldn't create texture: %s\n", SDL_GetError());
        SDL_FreeSurface(temp);
        return (-1);
    }
    SDL_FreeSurface(temp);

    # We're ready to roll. :) 
    return (0);
}

routine MoveSprites(window: SDL_Window, renderer: SDL_Renderer, sprite: SDL_Texture)
{
    window_w = WINDOW_WIDTH;
    window_h = WINDOW_HEIGHT;

    # Draw a gray background 
    SDL_SetRenderDrawColor(renderer, 0xA0, 0xA0, 0xA0, 0xFF);
    SDL_RenderClear(renderer);

    # Move the sprite, bounce at the wall, and draw 
    for (i = 0; i < NUM_SPRITES; ++i) {
        position = positions[i];
        velocity = velocities[i];
        position.x += velocity.x;
        if ((position.x < 0) || (position.x >= (window_w - sprite_w))) {
            velocity.x = -velocity.x;
            position.x += velocity.x;
        }
        position.y += velocity.y;
        if ((position.y < 0) || (position.y >= (window_h - sprite_h))) {
            velocity.y = -velocity.y;
            position.y += velocity.y;
        }

        # Blit the sprite onto the screen 
        SDL_RenderCopy(renderer, sprite, none, position);
    }

    # Update the screen! 
    SDL_RenderPresent(renderer);
}

routine main( ... as argtuple )
{
	argv = (list<string>) argtuple;
	argv.push( "testdraw", $front )

    event = SDL_Event();

    window = SDL_CreateWindow( argv[0], 0, 0, WINDOW_WIDTH, WINDOW_HEIGHT, 0 );
    if( window == none ) quit(2);
    renderer = SDL_CreateRenderer( window, 0, 0 );
    if( renderer == none ) quit(2);
#{
    if (SDL_CreateWindowAndRenderer(WINDOW_WIDTH, WINDOW_HEIGHT, 0, &window, &renderer) < 0) {
        quit(2);
    }
#}

    if (LoadSprite("icon.bmp", renderer) < 0) {
        quit(2);
    }

    # Initialize the sprite positions 
    # srand(time(NULL));
    for (i = 0; i < NUM_SPRITES; ++i) {
        positions[i].x = rand(100000) % (WINDOW_WIDTH - sprite_w);
        positions[i].y = rand(100000) % (WINDOW_HEIGHT - sprite_h);
        positions[i].w = sprite_w;
        positions[i].h = sprite_h;
        velocities[i].x = 0;
        velocities[i].y = 0;
        while (!velocities[i].x && !velocities[i].y) {
            velocities[i].x = (rand(100000) % (MAX_SPEED * 2 + 1)) - MAX_SPEED;
            velocities[i].y = (rand(100000) % (MAX_SPEED * 2 + 1)) - MAX_SPEED;
        }
    }

    # Main render loop 
    done = 0;
    while (!done) {
        # Check for events 
        while (SDL_PollEvent(event)) {
            if (event.type == SDL_QUIT || event.type == SDL_KEYDOWN) {
                done = 1;
            }
        }
        MoveSprites(window, renderer, sprite);
    }

    quit(0);
}

