
project = DaoMake::Project( "DaoSDL" ) 

daovm = DaoMake::FindPackage( "Dao", $REQUIRED )
daoaux = DaoMake::FindPackage( "DaoAux", $REQUIRED )
sdl2  = DaoMake::FindPackage( "SDL", $OPTIONAL )

code = 
@[code]
#include<SDL2/SDL_test.h>
int main(void){ return 0; }
@[code]

sdltest = DaoMake::TestCompile( code, "-lSDL2_test" ) != 0;

if( daovm == none or daoaux == none or sdl2 == none ) return

cflags = sdl2.MakeCompilingFlags()

clangdao = project.MakeBuildPath( "../../bin/clangdao" )
if( DaoMake::IsFile( clangdao ) && DaoMake::IsOutOfSourceBuild() == 0 ){
	mkdir = "@$(DAOMAKE) mkdir2 ./wrap"
	bind = project.AddCommand( "$(DAOMAKE_SOURCE_DIR)/wrap/dao_sdl.h: sdl.c", mkdir )
	bind.AddCommand( clangdao + " " + cflags + " sdl.c -o wrap/" )
	if( sdltest ){
		bind2 = project.AddCommand( "$(DAOMAKE_SOURCE_DIR)/wrap/dao_sdl_test.h: sdl_test.c", mkdir )
		bind2.AddCommand( clangdao + " " + cflags + " sdl_test.c -o wrap/" )
	}
}
project.SetTargetPath( "../../lib/dao/modules" )


project.UseImportLibrary( daovm, "dao" )
project.UseSharedLibrary( daoaux, "dao_aux" )

project.AddIncludePath( "." )
project.AddIncludePath( "../../kernel" )
project.AddIncludePath( "../../" )

sources = { "wrap/dao_sdl.c", "wrap/dao_sdl2.c", "wrap/dao_sdl3.c" }

daosdl_objs = project.AddObjects( sources, { "wrap/dao_sdl.h" } )
daosdl_dll = project.AddSharedLibrary( "dao_sdl", daosdl_objs )
daosdl_dll.UseSharedLibrary( sdl2 )

if( sdltest ){
	sources2 = { "wrap/dao_sdl_test.c", "wrap/dao_sdl_test2.c", "wrap/dao_sdl_test3.c" }
	daosdl_objs2 = project.AddObjects( sources2, { "wrap/dao_sdl_test.h" } )
	daosdl_dll2 = project.AddSharedLibrary( "dao_sdl_test", daosdl_objs2 )
	daosdl_dll2.UseSharedLibrary( sdl2 )
	daosdl_dll2.AddLinkingFlag( "-lSDL2_test" );
}

project.Install( DaoMake::Variables[ "INSTALL_MOD" ], daosdl_dll );

project.GenerateFinder( $TRUE );
